<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-09-13T05:28:03.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从输入url到看到页面发生了什么</title>
    <link href="http://yoursite.com/2016/09/13/%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E7%9C%8B%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>http://yoursite.com/2016/09/13/从输入url到看到页面发生了什么？/</id>
    <published>2016-09-13T05:28:03.000Z</published>
    <updated>2016-09-13T05:28:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>小妹对web的理解还很粗浅，姑且挑战一下这道经典题目</p>
<h2 id="1-浏览器生成http报文"><a href="#1-浏览器生成http报文" class="headerlink" title="1.浏览器生成http报文"></a>1.浏览器生成http报文</h2><p>当url输入到浏览器地址栏并且按下回车后，浏览器会根据我们输入的url生成一个http报文。<br>例如访问mm.littlewords.cn的时候会生成如下http报文<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">GET / HTTP/1.1</div><div class="line">Host: mm.littlewords.cn</div><div class="line">Connection: keep-alive</div><div class="line">Cache-Control: max-age=0</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line">User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36</div><div class="line">Accept-Encoding: gzip, deflate, sdch</div><div class="line">Accept-Language: zh-CN,zh;q=0.8</div></pre></td></tr></table></figure></p>
<h2 id="2-域名解析"><a href="#2-域名解析" class="headerlink" title="2.域名解析"></a>2.域名解析</h2><p>得到这样一个报文之后激动的孩子们当然是想赶紧吧它寄出去。<br><br>但是http协议是建立在传输层协议TCP协议之上的，TCP协议规定传输信息必须先在两台主机之间建立传输管道，<br><br>而建立这个传输管道需要目标主机的IP地址和端口号。<br><br>我们知道再不输入端口号的时候，浏览器会自动访问目的主机的80端口<br><br>那么怎么获得目的主机的IP地址呢？这就要了解一下dns域名解析<br><br><br><br>DNS（Domain Name System）直译就是域名系统的意思，最早互联网诞生的时候，并没有域名这个概念，那个时候都是直接用IP访问。但是IP虽然直接，但是缺点是很难记忆，不利于互联网的普及,于是就发明了DNS。<br><br>DNS是用于管理域名和IP地址映射关系的分布式数据库，DNS使用UDP协议传输数据。</p>
<h2 id="3-与服务器建立TCP连接"><a href="#3-与服务器建立TCP连接" class="headerlink" title="3.与服务器建立TCP连接"></a>3.与服务器建立TCP连接</h2><h2 id="4-发送请求报文"><a href="#4-发送请求报文" class="headerlink" title="4.发送请求报文"></a>4.发送请求报文</h2><h2 id="5-返回响应报文"><a href="#5-返回响应报文" class="headerlink" title="5.返回响应报文"></a>5.返回响应报文</h2><h2 id="6-关闭连接，渲染页面"><a href="#6-关闭连接，渲染页面" class="headerlink" title="6.关闭连接，渲染页面"></a>6.关闭连接，渲染页面</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;小妹对web的理解还很粗浅，姑且挑战一下这道经典题目&lt;/p&gt;
&lt;h2 id=&quot;1-浏览器生成http报文&quot;&gt;&lt;a href=&quot;#1-浏览器生
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>关于setTimeout</title>
    <link href="http://yoursite.com/2016/09/13/%E5%85%B3%E4%BA%8EsetTimeout/"/>
    <id>http://yoursite.com/2016/09/13/关于setTimeout/</id>
    <published>2016-09-13T05:28:03.000Z</published>
    <updated>2016-09-13T05:28:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-setTimeout在做什么"><a href="#1-setTimeout在做什么" class="headerlink" title="1.setTimeout在做什么"></a>1.setTimeout在做什么</h2><p>刚开始学习javascript可能会觉得这是一个十分显而易见的问题，例如这样子的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">setTimeout(function() &#123;</div><div class="line">    alert(&apos;littlewords&apos;)</div><div class="line">&#125;, 1000);</div></pre></td></tr></table></figure></p>
<p>第一印象也许会是1秒后执行alert(‘littlewords’)，这在大多数情况下结果跟我们的直觉非常相近，但在下面这样的情况将会出现与直觉不符的结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a = 0;</div><div class="line">setTimeout(function() &#123;</div><div class="line">    console.log(a);</div><div class="line">&#125;, 0);</div><div class="line">a += 1;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>输出结果：1</p>
</blockquote>
<p>what?发生了什么？为什么会是1？<br>要理解上面的输出结果首先要知道setTimeout并不是在n毫秒后执行传入的回调函数。在setTimeout被调用的时候，会有一个延时时间排入队列，然后运行之后的代码。等所有代码运行完毕后，javascript虚拟机才会来照顾一下队列中回调。<br>这样上面代码就很好理解了</p>
<blockquote>
<p>1step:声明并初始化变量a=0<br>2step:将回调function(){console.log(a)}推入延时队列<br>3step:a加1<br>4step:执行回调</p>
</blockquote>
<p>现在就很容易想清楚为什么下面代码最后的结果为什么会是100了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var a = 0;</div><div class="line">function one()&#123;</div><div class="line">    for(var i = 0; i&lt;10;i++)&#123;</div><div class="line">        setTimeout(function()&#123;</div><div class="line">            a+=i;</div><div class="line">        &#125;,0);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">function two()&#123;</div><div class="line">    alert(a);</div><div class="line">&#125;</div><div class="line">one();</div><div class="line">setTimeout(two,0);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-setTimeout在做什么&quot;&gt;&lt;a href=&quot;#1-setTimeout在做什么&quot; class=&quot;headerlink&quot; title=&quot;1.setTimeout在做什么&quot;&gt;&lt;/a&gt;1.setTimeout在做什么&lt;/h2&gt;&lt;p&gt;刚开始学习javascrip
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="setTimeout" scheme="http://yoursite.com/tags/setTimeout/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>javascript跨域</title>
    <link href="http://yoursite.com/2016/09/13/javascript%E8%B7%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2016/09/13/javascript跨域/</id>
    <published>2016-09-13T05:28:03.000Z</published>
    <updated>2016-09-13T05:28:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是跨域"><a href="#1-什么是跨域" class="headerlink" title="1.什么是跨域"></a>1.什么是跨域</h2><p>要理解跨域首先要知道javascript语言安全限制中的同源策略。同源策略是指一段脚本只能读取来自同一来源的窗口和文档的属性,即</p>
<blockquote>
<p>主机号+协议+端口必须匹配</p>
</blockquote>
<table>
<thead>
<tr>
<th>URL</th>
<th style="text-align:center">说明</th>
<th style="text-align:right">是否允许通信</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a> <a href="http://www.a.com/b.js" target="_blank" rel="external">http://www.a.com/b.js</a></td>
<td style="text-align:center">同一域名下</td>
<td style="text-align:right">允许</td>
</tr>
<tr>
<td><a href="http://www.a.com/lab/a.js" target="_blank" rel="external">http://www.a.com/lab/a.js</a> <a href="http://www.a.com/script/b.js" target="_blank" rel="external">http://www.a.com/script/b.js</a></td>
<td style="text-align:center">同一域名下不同文件夹</td>
<td style="text-align:right">允许</td>
</tr>
<tr>
<td><a href="http://www.a.com:8000/a.js" target="_blank" rel="external">http://www.a.com:8000/a.js</a> <a href="http://www.a.com/b.js" target="_blank" rel="external">http://www.a.com/b.js</a></td>
<td style="text-align:center">同一域名，不同端口</td>
<td style="text-align:right">不允许</td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a> <a href="https://www.a.com/b.js" target="_blank" rel="external">https://www.a.com/b.js</a></td>
<td style="text-align:center">同一域名，不同协议</td>
<td style="text-align:right">不允许</td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a> <a href="http://70.32.92.74/b.js" target="_blank" rel="external">http://70.32.92.74/b.js</a></td>
<td style="text-align:center">域名和域名对应ip</td>
<td style="text-align:right">不允许</td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a> <a href="http://script.a.com/b.js" target="_blank" rel="external">http://script.a.com/b.js</a></td>
<td style="text-align:center">主域相同，子域不同</td>
<td style="text-align:right">不允许</td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a> <a href="http://a.com/b.js" target="_blank" rel="external">http://a.com/b.js</a></td>
<td style="text-align:center">同一域名，不同二级域名（同上）</td>
<td style="text-align:right">不允许（cookie这种情况下也不允许访问）</td>
</tr>
<tr>
<td><a href="http://www.cnblogs.com/a.js" target="_blank" rel="external">http://www.cnblogs.com/a.js</a> <a href="http://www.a.com/b.js" target="_blank" rel="external">http://www.a.com/b.js</a></td>
<td style="text-align:center">不同域名</td>
<td style="text-align:right">不允许</td>
</tr>
</tbody>
</table>
<h2 id="2-跨域的实现方式"><a href="#2-跨域的实现方式" class="headerlink" title="2.跨域的实现方式"></a>2.跨域的实现方式</h2><h3 id="1-document-domain-iframe实现跨域"><a href="#1-document-domain-iframe实现跨域" class="headerlink" title="1.document.domain+iframe实现跨域"></a>1.document.domain+iframe实现跨域</h3><p>可以通过设置document.domain的办法来解决。例如在<a href="http://www.a.com/a.html和http://script.a.com/b.html两个文件中都加上document.domain" target="_blank" rel="external">http://www.a.com/a.html和http://script.a.com/b.html两个文件中都加上document.domain</a> = ‘a.com’；然后通过a.html文件中创建一个iframe，去控制iframe的contentDocument，这样就可以实现不同二级域名相同顶级域名下的跨域操作，如果将www.a.com的domain设置成c.com是会报错的。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">document.domain = &apos;a.com&apos;;</div><div class="line">var ifr = document.createElement(&apos;iframe&apos;);</div><div class="line">ifr.src = &apos;http://script.a.com/b.html&apos;;</div><div class="line">ifr.style.display = &apos;none&apos;;</div><div class="line">document.body.appendChild(ifr);</div><div class="line">ifr.onload = function()&#123;</div><div class="line">    var doc = ifr.contentDocument || ifr.contentWindow.document;</div><div class="line">    // 在这里操纵b.html</div><div class="line">    alert(doc.getElementsByTagName(&quot;h1&quot;)[0].childNodes[0].nodeValue);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="2-动态创建script"><a href="#2-动态创建script" class="headerlink" title="2.动态创建script"></a>2.动态创建script</h3><p>这种方法又被称之为JSONP(JSON with Padding),浏览器禁止了跨域访问，但允许在页面中引入其他域的js文件，这些来自其他域的js文件也能像页面所在域的js文件一样创建函数甚至操作cookie和DOM。以下是通过动态创建script实现跨域的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">window.onload = function () &#123;</div><div class="line">	var script = document.createElement(&quot;script&quot;);</div><div class="line">	script.type = &quot;text/javascript&quot;;</div><div class="line">	</div><div class="line">	//返回的字符串不能像单纯的&#123;name:&quot;littlewords&quot;&#125;</div><div class="line">	//而应该像这样的形式  var json = &#123;name:&quot;littlewords&quot;&#125;</div><div class="line">	script.src = &quot;http://otherDomain.com/script.php&quot;;</div><div class="line">	/*</div><div class="line">		//http://otherDomain.com/script.php示例代码</div><div class="line">		&lt;?php</div><div class="line">			echo &quot;var json = &#123;\&quot;name\&quot;:\&quot;littlewords\&quot;&#125;&quot;</div><div class="line">		?&gt;</div><div class="line">	*/</div><div class="line">	</div><div class="line">	var head = document.getElementsByTagName(&quot;head&quot;)[0];</div><div class="line">	head.insertBefore(script, head.firstChild);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="3-使用window-name"><a href="#3-使用window-name" class="headerlink" title="3.使用window.name"></a>3.使用window.name</h3><p>在一个窗口(window)的生命周期中，窗口载入的所有页面共享一个window.name,每个页面对window.name都具有读写权利<br>可以通过在<a href="http://domain.com/a.html中将要传递的数据赋值给window.name，再载入http://otherDomain.com/b.hmtl从而实现跨域访问" target="_blank" rel="external">http://domain.com/a.html中将要传递的数据赋值给window.name，再载入http://otherDomain.com/b.hmtl从而实现跨域访问</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//http://domain.com/a.html代码</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">	window.name = &quot;需要传递的数据&quot;</div><div class="line">	//1秒后跳转页面</div><div class="line">	setTimeout(function&#123;</div><div class="line">		window.location = &quot;http://otherDomain.com/b.hmtl&quot;</div><div class="line">	&#125;,1000);</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">//http://otherDomain.com/b.hmtl代码</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">	alert(window.name);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="4-HTML5激动人心的postMessage"><a href="#4-HTML5激动人心的postMessage" class="headerlink" title="4.HTML5激动人心的postMessage"></a>4.HTML5激动人心的postMessage</h3><p>window.postMessage(message,targetOrigin)方法的第一个参数message为要发送的消息，类型只能为字符串；第二个参数targetOrigin用来限定接收消息的那个window对象所在的域，如果不想限定域，可以使用通配符 * (个人认为尽量不要使用通配符)。<br>需要接收消息的window对象，可是通过监听自身的message事件来获取传过来的消息，消息内容储存在该事件对象的data属性中。<br>下面是代码示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//http:domain.com/a.html</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">function callBack()&#123;</div><div class="line">	var ifr = document.getElementById(&apos;iframeb&apos;);</div><div class="line">	var winContent = ifr.contentWindow;</div><div class="line">	winContent.postMessage(&apos;Hello littlewords&apos;,&apos;http:www.domain.com&apos;)</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;iframe id=&quot;iframeb&quot; src=&quot;http://www.domain.com/b.hmtl onload=&quot;callBack()&quot;&gt;&lt;/iframe&gt;</div><div class="line"></div><div class="line"></div><div class="line">//http:www.domain.com/b.html</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">window.onmessage = function(e)&#123;</div><div class="line">	e = e||window.event;</div><div class="line">	alert(e.data)//输出结果为 Hello littlewords</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-什么是跨域&quot;&gt;&lt;a href=&quot;#1-什么是跨域&quot; class=&quot;headerlink&quot; title=&quot;1.什么是跨域&quot;&gt;&lt;/a&gt;1.什么是跨域&lt;/h2&gt;&lt;p&gt;要理解跨域首先要知道javascript语言安全限制中的同源策略。同源策略是指一段脚本只能读取来自同
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="跨域" scheme="http://yoursite.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="jsonp" scheme="http://yoursite.com/tags/jsonp/"/>
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>javascript异步编程的4种方式</title>
    <link href="http://yoursite.com/2016/09/13/javascript%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E7%9A%844%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/09/13/javascript实现异步的4种方式/</id>
    <published>2016-09-13T05:28:03.000Z</published>
    <updated>2016-09-13T05:28:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>javascript由于其单线程的特性，需要采用异步编程的方式来解决由于耗时操作阻塞线程导致’白屏死机’等问题。下面我们来看一下异步编程的四种实现方式。</p>
<h2 id="1-回调"><a href="#1-回调" class="headerlink" title="1.回调"></a>1.回调</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">func1();</div><div class="line">func2();</div><div class="line">func3();</div></pre></td></tr></table></figure>
<p>如上面代码，三个函数将按照顺序执行，func2等待func1执行完毕后执行，func3等待func2执行完毕后执行。这一切都非常的美好，事情有条不紊的进行着…<br>然而当func2是一个耗时操作的时候，这一切似乎变得不那么赏心悦目。func3将苦苦的等候func2试行完毕，但并不需要func2的执行结果。这在很大程度上造成了时间上的浪费。就像是很多人排着队共用一个厕所位，并不需要前一个人在里面产生的结果，而只需要他占用的坑位，偏偏这是一位便秘的仁兄，于是后面的人个个都憋的绿了脸。<br>那么为什么javascript”不在厕所里面多安几个马桶”？当然是为了修的跟别家的厕所不同(请不要喷我，我只是习惯了逗而已)<br>好，上面的问题都不重要，线程虽然只有一条，但是得益于异步编程的方式，在排队秩序上更下功夫也让javascript兵贵神速。我们那些耗时操作写到回调里面去，向下面这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function func1(callBack)&#123;</div><div class="line">	setTimeout(callBack,0);</div><div class="line">&#125;</div><div class="line">func1(func2);</div><div class="line">func3();</div></pre></td></tr></table></figure></p>
<p>这样耗时操作func2将不再阻塞线程，而是被推入延时队列，等待线程空闲的执行。<br>优点：简单、容易理解和部署<br>缺点：不利于代码的阅读和维护，各个部分之间高度耦合（Coupling），流程很混乱</p>
<h2 id="2-监听"><a href="#2-监听" class="headerlink" title="2.监听"></a>2.监听</h2><p>另一种思路是采用事件驱动模式。任务的执行不取决于代码的顺序，而取决于某个事件是否发生。<br>例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">func1.onEvent = fucn2;</div></pre></td></tr></table></figure></p>
<p>这里用了类似浏览器事件的写法，不过事件驱动并不是狭义的浏览器事件，可以将他理解成something happened即一些”有趣的事情”发生了。func2受到已绑定的事件的驱动，当事件被激活的时候执行func2<br>优点:容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，”去耦合”（Decoupling），有利于实现模块化。<br>缺点:流程不清晰</p>
<h2 id="3-PubSub模式"><a href="#3-PubSub模式" class="headerlink" title="3.PubSub模式"></a>3.PubSub模式</h2><p>如上面提到的事件驱动，形如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">func1.onEvent = func2;</div></pre></td></tr></table></figure></p>
<p>一目了然，似乎非常完美，优雅动人并且与其他语言相比别具一格。但当被驱动的函数增加时，一切就变得不那么美好<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">func1.onEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	func2.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</div><div class="line">	func3.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</div><div class="line">	func4.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</div><div class="line">	func5.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这不仅冗长重复，而且会制造出浮肿的处理器函数。来看一下发布/订阅模式如何解决问题的。<br>(以node的EventEmitter对象为例)<br>事件订阅过程subscribe：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emitter.on(&apos;somethingIntresting&apos;,func)</div></pre></td></tr></table></figure></p>
<p>事件发布publish：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emitter.emit(&apos;somethingIntresting&apos;)</div></pre></td></tr></table></figure></p>
<p>emittet.emit发布了前面订阅的事件，从而触发了func的执行。其本质还是事件驱动。但却明显优于后者。<br>他很容易添加处理函数，且完全不用担心处理函数的接踵而至而产生出的踩踏事件。</p>
<h2 id="4-promise-待续…"><a href="#4-promise-待续…" class="headerlink" title="4.promise(待续…)"></a>4.promise(待续…)</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;javascript由于其单线程的特性，需要采用异步编程的方式来解决由于耗时操作阻塞线程导致’白屏死机’等问题。下面我们来看一下异步编程的四
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="异步" scheme="http://yoursite.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="pubsub" scheme="http://yoursite.com/tags/pubsub/"/>
    
  </entry>
  
  <entry>
    <title>javascript实现静态属性</title>
    <link href="http://yoursite.com/2016/09/13/js%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%9D%99%E6%80%81%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2016/09/13/js如何实现静态属性和方法/</id>
    <published>2016-09-13T05:28:03.000Z</published>
    <updated>2016-09-13T05:28:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>熟悉java，c++这些变成语言程序员都知道静态属性这一概念。<br>属性和方法是在对象的实例的基础上进行操作的，而静态属性和方法是在类的基础上进行操作的<br>而javascript中没有类的概念，也没有静态属性关键字。想要实现静态变量可以用闭包的方法<br>代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">var constructor = (function()&#123;</div><div class="line">	//静态变量num</div><div class="line">	var num = 0;</div><div class="line"></div><div class="line">	//真正的构造函数</div><div class="line">	var construct =  function(name,sex,age)&#123;</div><div class="line">		//构建作用域安全的对象</div><div class="line">		if(this instanceof construct)&#123;</div><div class="line">			this.name = name;</div><div class="line">			this.sex = sex;</div><div class="line">			this.age = age;</div><div class="line">			//静态变量加一</div><div class="line">			num++;</div><div class="line">			if(num&gt;10)&#123;</div><div class="line">				throw new Error(&apos;constructor对象只能被创建10次&apos;)</div><div class="line">			&#125;</div><div class="line">		&#125;else&#123;</div><div class="line">			return new construct(name,sex,age);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	//返回构造函数</div><div class="line">	return construct;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>在上面的代码中，constructor被赋值时，匿名函数执行，返回真正的构造函数。<br>匿名函数中的num变量存在于匿名函数的作用域中，由于真正的构造函数construct也在该作用域中定义。<br>所以每当实例化对象实例时，构造函数能够对匿名函数作用域中的num进行操作，从而达到类似静态变量的效果</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;熟悉java，c++这些变成语言程序员都知道静态属性这一概念。&lt;br&gt;属性和方法是在对象的实例的基础上进行操作的，而静态属性和方法是在类的基础上进行操作的&lt;br&gt;而javascript中没有类的概念，也没有静态属性关键字。想要实现静态变量可以用闭包的方法&lt;br&gt;代码如下&lt;b
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>笔记</title>
    <link href="http://yoursite.com/2016/09/13/note/"/>
    <id>http://yoursite.com/2016/09/13/note/</id>
    <published>2016-09-13T05:28:03.000Z</published>
    <updated>2016-09-13T05:28:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>有这样一种写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if(context === void 0) return func;</div></pre></td></tr></table></figure></p>
<p>void是javascript中的一个函数，接受一个参数返回值永远都是undefined。可以说，使用void的目的就是为了得到javascript中的undefined。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">void 0</div><div class="line">void (0)</div><div class="line">void hello</div><div class="line">void (new Date())</div></pre></td></tr></table></figure></p>
<p>以上都讲返回undefined,那么为什么不直接使用undefined<br>undefined并不是javascript的保留字，在一些环境下可以被赋值，这样就不能安全的得到undefined的值，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var undefined = 100;</div><div class="line">console.log(undefined);</div></pre></td></tr></table></figure></p>
<h4 id="的作用"><a href="#的作用" class="headerlink" title="!!的作用"></a>!!的作用</h4><p>在javascript中，!null和!undefined都会产生TRUE的结果，所以!!就相当于取布尔值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">!!null;//返回false</div><div class="line">!!&quot;2&quot;;//返回TRUE</div></pre></td></tr></table></figure></p>
<p>arr.slice()<br>可以说实现对一个数组的拷贝，不错的技巧</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>1.原形链继承<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var father = &#123;</div><div class="line">    a : 1,</div><div class="line">    b : 2,</div><div class="line">&#125;;</div><div class="line">var son = function()&#123;</div><div class="line">    this.c  = 3;</div><div class="line">    this.d  = 4;</div><div class="line">&#125;;</div><div class="line">son.prototype  = father;</div><div class="line">var test = new son();</div><div class="line">console.log(test.a); // 1</div></pre></td></tr></table></figure></p>
<p>2.构造函数继承<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var gz1 = function()&#123;</div><div class="line">    this.a = 1;</div><div class="line">    this.b = 2;</div><div class="line">&#125;;</div><div class="line">var yaya = new gz1;</div><div class="line">var gz2 = function()&#123;</div><div class="line">    gz1.call(this);</div><div class="line">    this.c =3;</div><div class="line">    this.d = 4;</div><div class="line">&#125;</div><div class="line">var ynyn = new gz2;</div></pre></td></tr></table></figure></p>
<p>3.拷贝式继承</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var extend = function(desObj,srcObj)&#123;</div><div class="line">    for(var key in srcObj)&#123;</div><div class="line">        if (Object.prototype.toString.call(srcObj[key]) == &quot;[object Object]&quot;)&#123;</div><div class="line">            desObj[key] = &#123;&#125;;</div><div class="line">            desObj[key] = srcObj[key];</div><div class="line">        &#125;else if(Object.prototype.toString.call(srcObj[key]) == &quot;[object Array]&quot;)&#123;</div><div class="line">            desObj[key] = [];</div><div class="line">            desObj[key] = srcObj[key].slice();</div><div class="line">        &#125;else&#123;</div><div class="line">            desObj[key] = srcObj[key];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var b = [1,2,3,[4,5],&#123;6:7,7:8&#125;];</div><div class="line">var a = [];</div><div class="line">extend(a,b);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有这样一种写法&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="underscore" scheme="http://yoursite.com/tags/underscore/"/>
    
  </entry>
  
  <entry>
    <title>XOR异或运算</title>
    <link href="http://yoursite.com/2016/09/13/xor%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97/"/>
    <id>http://yoursite.com/2016/09/13/xor异或运算/</id>
    <published>2016-09-13T05:28:03.000Z</published>
    <updated>2016-09-20T03:24:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XOR"><a href="#XOR" class="headerlink" title="XOR"></a>XOR</h2><p>异或是一个数学运算符,用于逻辑运算.异或的数学符号为“⊕”，计算机符号为“xor”。运算规则为:</p>
<blockquote>
<p>1^0=1<br>1^1=0<br>0^1=1<br>0^0=0</p>
</blockquote>
<p>即:相同取0,相异取1.在判断真(1)假(0)时:仅有一个为真(1)时才为真(1).</p>
<h2 id="异或的用途"><a href="#异或的用途" class="headerlink" title="异或的用途"></a>异或的用途</h2><h5 id="1-在不必使用第三个值-中间变量-的时候-交换两个整数的值"><a href="#1-在不必使用第三个值-中间变量-的时候-交换两个整数的值" class="headerlink" title="1.在不必使用第三个值(中间变量)的时候,交换两个整数的值"></a>1.在不必使用第三个值(中间变量)的时候,交换两个整数的值</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">var b = 2;</div><div class="line">a = a ^ b;</div><div class="line">b = b ^ a;</div><div class="line">a = a ^ b;//a = 2;b = 1;</div></pre></td></tr></table></figure>
<h5 id="2-奇偶判断"><a href="#2-奇偶判断" class="headerlink" title="2.奇偶判断"></a>2.奇偶判断</h5><p>题目:一个数组存放若干整数，一个数出现奇数次，其余数均出现偶数次，找出这个出现奇数次的数？</p>
<p>解法:把所有数异或,偶数次异或为0,奇数次异或为数本身.</p>
<p>变形题目:1-1000放在含有1001个元素的数组中，只有唯一的一个元素值重复，其它均只出现一次。每个数组元素只能访问一次，设计一个算法，将它找出来；不用辅助存储空间，能否设计一个算法实现？</p>
<p>解法:把所有数异或后的结果与1-1000异或后的结果异或,得到结果.</p>
<h5 id="3-内存保护作用"><a href="#3-内存保护作用" class="headerlink" title="3.内存保护作用"></a>3.内存保护作用</h5>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;XOR&quot;&gt;&lt;a href=&quot;#XOR&quot; class=&quot;headerlink&quot; title=&quot;XOR&quot;&gt;&lt;/a&gt;XOR&lt;/h2&gt;&lt;p&gt;异或是一个数学运算符,用于逻辑运算.异或的数学符号为“⊕”，计算机符号为“xor”。运算规则为:&lt;/p&gt;
&lt;blockquote&gt;

    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="xor" scheme="http://yoursite.com/tags/xor/"/>
    
  </entry>
  
</feed>
